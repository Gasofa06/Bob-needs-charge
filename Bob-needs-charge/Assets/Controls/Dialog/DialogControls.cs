//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls/Dialog/DialogControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogControls"",
    ""maps"": [
        {
            ""name"": ""Dialog"",
            ""id"": ""1e9e4cb3-c380-452a-895d-485866e82479"",
            ""actions"": [
                {
                    ""name"": ""NextSentence"",
                    ""type"": ""Button"",
                    ""id"": ""2fef522c-eca7-4ffd-88b3-ec40506ec579"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""ff95619f-81bf-4a85-b03e-83b79ce9d18f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68783303-78a0-49ce-9ad7-3e31d4e559e6"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69db9fb6-ff18-43c6-9cf5-affda9bf56bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5874a4d8-ff40-4e7b-b9e4-5f00b51d24a7"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce9c938b-5ad9-4e8e-b3df-6cc154d81731"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSentence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91de1c30-e378-4360-bcee-54a6cfbb6dc8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0d8abed-4cc2-4c75-9e9f-3c29f6d1ccfb"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
        m_Dialog_NextSentence = m_Dialog.FindAction("NextSentence", throwIfNotFound: true);
        m_Dialog_Talk = m_Dialog.FindAction("Talk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dialog
    private readonly InputActionMap m_Dialog;
    private IDialogActions m_DialogActionsCallbackInterface;
    private readonly InputAction m_Dialog_NextSentence;
    private readonly InputAction m_Dialog_Talk;
    public struct DialogActions
    {
        private @DialogControls m_Wrapper;
        public DialogActions(@DialogControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSentence => m_Wrapper.m_Dialog_NextSentence;
        public InputAction @Talk => m_Wrapper.m_Dialog_Talk;
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void SetCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterface != null)
            {
                @NextSentence.started -= m_Wrapper.m_DialogActionsCallbackInterface.OnNextSentence;
                @NextSentence.performed -= m_Wrapper.m_DialogActionsCallbackInterface.OnNextSentence;
                @NextSentence.canceled -= m_Wrapper.m_DialogActionsCallbackInterface.OnNextSentence;
                @Talk.started -= m_Wrapper.m_DialogActionsCallbackInterface.OnTalk;
                @Talk.performed -= m_Wrapper.m_DialogActionsCallbackInterface.OnTalk;
                @Talk.canceled -= m_Wrapper.m_DialogActionsCallbackInterface.OnTalk;
            }
            m_Wrapper.m_DialogActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextSentence.started += instance.OnNextSentence;
                @NextSentence.performed += instance.OnNextSentence;
                @NextSentence.canceled += instance.OnNextSentence;
                @Talk.started += instance.OnTalk;
                @Talk.performed += instance.OnTalk;
                @Talk.canceled += instance.OnTalk;
            }
        }
    }
    public DialogActions @Dialog => new DialogActions(this);
    public interface IDialogActions
    {
        void OnNextSentence(InputAction.CallbackContext context);
        void OnTalk(InputAction.CallbackContext context);
    }
}
